// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: db_queries.sql

package main

import (
	"context"
)

const getTS = `-- name: GetTS :one
select
    tax_simulation_id,
    version,
    gross_salary,
    ahv_beitrag,
	alv_beitrag,
    ktg_beitrag,
    bvg_beitrag,
    taxable_salary,
    year,
	commune_id,
	investment,
    deduction_other,
    deduction_transport,
	deduction_profession,
    deduction_third_pillar,
    deduction_health_insurance,
    deduction_meal
from tax_simulation where tax_simulation_id = ?
`

func (q *Queries) GetTS(ctx context.Context, taxSimulationID string) (TaxSimulation, error) {
	row := q.db.QueryRowContext(ctx, getTS, taxSimulationID)
	var i TaxSimulation
	err := row.Scan(
		&i.TaxSimulationID,
		&i.Version,
		&i.GrossSalary,
		&i.AhvBeitrag,
		&i.AlvBeitrag,
		&i.KtgBeitrag,
		&i.BvgBeitrag,
		&i.TaxableSalary,
		&i.Year,
		&i.CommuneID,
		&i.Investment,
		&i.DeductionOther,
		&i.DeductionTransport,
		&i.DeductionProfession,
		&i.DeductionThirdPillar,
		&i.DeductionHealthInsurance,
		&i.DeductionMeal,
	)
	return i, err
}

const insertTS = `-- name: InsertTS :exec
insert into tax_simulation(tax_simulation_id) values( ? )
`

func (q *Queries) InsertTS(ctx context.Context, taxSimulationID string) error {
	_, err := q.db.ExecContext(ctx, insertTS, taxSimulationID)
	return err
}

const updateTSDeduction = `-- name: UpdateTSDeduction :exec
update tax_simulation
set
    deduction_other = ?,
    deduction_transport = ?,
	deduction_profession = ?,
    deduction_third_pillar = ?,
    deduction_health_insurance = ?,
    deduction_meal = ?,
    version = version + 1
where tax_simulation_id = ?
`

type UpdateTSDeductionParams struct {
	DeductionOther           int
	DeductionTransport       int
	DeductionProfession      int
	DeductionThirdPillar     int
	DeductionHealthInsurance int
	DeductionMeal            int
	TaxSimulationID          string
}

func (q *Queries) UpdateTSDeduction(ctx context.Context, arg UpdateTSDeductionParams) error {
	_, err := q.db.ExecContext(ctx, updateTSDeduction,
		arg.DeductionOther,
		arg.DeductionTransport,
		arg.DeductionProfession,
		arg.DeductionThirdPillar,
		arg.DeductionHealthInsurance,
		arg.DeductionMeal,
		arg.TaxSimulationID,
	)
	return err
}

const updateTSIncome = `-- name: UpdateTSIncome :exec
update tax_simulation
set
    gross_salary = ?,
    ahv_beitrag = ?,
    alv_beitrag = ?,
    ktg_beitrag = ?,
    bvg_beitrag = ?,
    taxable_salary = ?,
    year = ?,
    commune_id = ?,
    version = version + 1
where tax_simulation_id = ?
`

type UpdateTSIncomeParams struct {
	GrossSalary     int
	AhvBeitrag      int
	AlvBeitrag      int
	KtgBeitrag      int
	BvgBeitrag      int
	TaxableSalary   int
	Year            int
	CommuneID       int
	TaxSimulationID string
}

func (q *Queries) UpdateTSIncome(ctx context.Context, arg UpdateTSIncomeParams) error {
	_, err := q.db.ExecContext(ctx, updateTSIncome,
		arg.GrossSalary,
		arg.AhvBeitrag,
		arg.AlvBeitrag,
		arg.KtgBeitrag,
		arg.BvgBeitrag,
		arg.TaxableSalary,
		arg.Year,
		arg.CommuneID,
		arg.TaxSimulationID,
	)
	return err
}

const updateTSInvestment = `-- name: UpdateTSInvestment :exec
update tax_simulation
set
    investment = ?,
    version = version + 1
where tax_simulation_id = ?
`

type UpdateTSInvestmentParams struct {
	Investment      int
	TaxSimulationID string
}

func (q *Queries) UpdateTSInvestment(ctx context.Context, arg UpdateTSInvestmentParams) error {
	_, err := q.db.ExecContext(ctx, updateTSInvestment, arg.Investment, arg.TaxSimulationID)
	return err
}
